
ht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000482  00000516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000482  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800154  00800154  0000056a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000984  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070e  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000442  00000000  00000000  000016c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001b08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a8  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029d  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002345  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__vector_10>
  2c:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e5       	ldi	r26, 0x54	; 84
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 36       	cpi	r26, 0x61	; 97
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  9e:	0c 94 3f 02 	jmp	0x47e	; 0x47e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <readADC>:

uint16_t readADC()
{
	uint16_t uADCval;
	
	ADCSRA |= _BV(ADEN);			// sallitaan ADC
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADSC);			// k‰ynnistet‰‰n muunnos asettamalla ADSC bitti ADCSRA:aan
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	
	while (ADCSRA & _BV(ADSC));		// odotetaan kunnes ADC muunnos valmis ts. kunnes ADC bitti on resetoitunut
  b6:	80 81       	ld	r24, Z
  b8:	86 fd       	sbrc	r24, 6
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <readADC+0x10>
	
	uADCval = ADC;					// luetaan tulos
  bc:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  c0:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ADCSRA &= ~(_BV(ADEN));			// pys‰ytet‰‰n ADC, ei tarvetta pit‰‰ sit‰ k‰ynniss‰
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	90 81       	ld	r25, Z
  ca:	9f 77       	andi	r25, 0x7F	; 127
  cc:	90 83       	st	Z, r25
	
	return uADCval;					// palautetaan ADC:n tulos
}
  ce:	c9 01       	movw	r24, r18
  d0:	08 95       	ret

000000d2 <Timer0>:
// takeSteps p‰‰ttyy ------------------------

// --------- TIMER0 -------------------------
void Timer0(TIMER_STATE state)
{
	switch (state) {
  d2:	88 23       	and	r24, r24
  d4:	19 f0       	breq	.+6      	; 0xdc <Timer0+0xa>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	29 f0       	breq	.+10     	; 0xe4 <Timer0+0x12>
  da:	11 c0       	rjmp	.+34     	; 0xfe <Timer0+0x2c>
		case TIMER_INIT:
			TCCR0A |= (_BV(WGM01));					// CTC mode (Mode 2)
  dc:	84 b5       	in	r24, 0x24	; 36
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	84 bd       	out	0x24, r24	; 36
			//TCCR0B |= (_BV(CS00) | _BV(CS02));	// prescaler 1024
			// Notice we haven't set the timer0 interrupt flag yet, ISR is NOT called!
		break;
  e2:	08 95       	ret
		
		case TIMER_START:
			OCR0A = STEP_PULSE_LEN;					// set stepping speed to constant value (=positive pulse length)
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	87 bd       	out	0x27, r24	; 39
			TCNT0 = 0x00;							// reset counter
  e8:	16 bc       	out	0x26, r1	; 38
			TIFR0  |= _BV(OCIE0A);					// clear possible pending IRQ's
  ea:	a9 9a       	sbi	0x15, 1	; 21
			TIMSK0 |= (_BV(OCIE0A));				// turn on Timer0 compare A interrupts, stepping is performed in ISR(TIMER0_COMPA_vect)
  ec:	ee e6       	ldi	r30, 0x6E	; 110
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 83       	st	Z, r24
			TCCR0B |= (_BV(CS00) | _BV(CS02));		// prescaler 1024, start timer0
  f6:	85 b5       	in	r24, 0x25	; 37
  f8:	85 60       	ori	r24, 0x05	; 5
  fa:	85 bd       	out	0x25, r24	; 37
		break;
  fc:	08 95       	ret
		
		case TIMER_STOP:
		default:
			TCCR0B &= ~(_BV(CS00) | _BV(CS02));		// stop timer0
  fe:	85 b5       	in	r24, 0x25	; 37
 100:	8a 7f       	andi	r24, 0xFA	; 250
 102:	85 bd       	out	0x25, r24	; 37
			TIMSK0 &= ~(_BV(OCIE0A));				// turn timer0 interrupts back off
 104:	ee e6       	ldi	r30, 0x6E	; 110
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8d 7f       	andi	r24, 0xFD	; 253
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <TakeSteps>:
// --------- VIISARIN LIIKUTTAMINEN ----------------
// funktio takeSteps kontrolloi viisarin liikuttamista
// ushowManySteps on askelten lukum‰‰r‰ liikuttamiseen (positiivinen = CW, negatiivinen = CCW)

void TakeSteps(int16_t ushowManySteps)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
	if (ushowManySteps > 0) {
 116:	18 16       	cp	r1, r24
 118:	19 06       	cpc	r1, r25
 11a:	24 f4       	brge	.+8      	; 0x124 <TakeSteps+0x14>
		direction = M_CW;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direction>
 122:	06 c0       	rjmp	.+12     	; 0x130 <TakeSteps+0x20>
	}
	else {
		direction = M_CCW;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direction>
		ushowManySteps = -ushowManySteps;
 12a:	d1 95       	neg	r29
 12c:	c1 95       	neg	r28
 12e:	d1 09       	sbc	r29, r1
	}

	guStepCounter = 0;			// initialize to zero steps taken so far
 130:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <guStepCounter+0x1>
 134:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <guStepCounter>

	Timer0(TIMER_START);		// Timer0 counts from 0 to STEP_PULSE_LEN, ISR(TIMER0_COMPA_vect) is called at TOP
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 69 00 	call	0xd2	; 0xd2 <Timer0>
	while(!(guStepCounter == ushowManySteps)) {
 13e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <guStepCounter>
 142:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <guStepCounter+0x1>
 146:	8c 17       	cp	r24, r28
 148:	9d 07       	cpc	r25, r29
 14a:	c9 f7       	brne	.-14     	; 0x13e <TakeSteps+0x2e>
		;
	}
		
	Timer0(TIMER_STOP);			// No need to keep timer running
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	0e 94 69 00 	call	0xd2	; 0xd2 <Timer0>
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <Timer1>:
// Timer0 p‰‰ttyy ------------------------------

// ---------- TIMER1 ---------------------------
void Timer1(TIMER_STATE state)
{
	switch (state) {
 158:	88 23       	and	r24, r24
 15a:	19 f0       	breq	.+6      	; 0x162 <Timer1+0xa>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	51 f0       	breq	.+20     	; 0x174 <Timer1+0x1c>
 160:	21 c0       	rjmp	.+66     	; 0x1a4 <Timer1+0x4c>
		case TIMER_INIT:
			TCCR1B |= (_BV(WGM12));
 162:	e1 e8       	ldi	r30, 0x81	; 129
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	88 60       	ori	r24, 0x08	; 8
 16a:	80 83       	st	Z, r24
			TCCR1B &= ~(_BV(ICES1));
 16c:	80 81       	ld	r24, Z
 16e:	8f 7b       	andi	r24, 0xBF	; 191
 170:	80 83       	st	Z, r24
		break;
 172:	08 95       	ret
		
		case TIMER_START:
			OCR1A = TIMER1_100MS_CNT;				
 174:	89 e6       	ldi	r24, 0x69	; 105
 176:	98 e1       	ldi	r25, 0x18	; 24
 178:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 17c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			TCNT1 = 0x00;							
 180:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 184:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
			TIFR1 |= (_BV(ICF1)  | _BV(OCF1A));					
 188:	86 b3       	in	r24, 0x16	; 22
 18a:	82 62       	ori	r24, 0x22	; 34
 18c:	86 bb       	out	0x16, r24	; 22
			TIMSK1 |= (_BV(ICIE1) | _BV(OCIE1A));				
 18e:	ef e6       	ldi	r30, 0x6F	; 111
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	82 62       	ori	r24, 0x22	; 34
 196:	80 83       	st	Z, r24
			TCCR1B |= (_BV(CS12));		
 198:	e1 e8       	ldi	r30, 0x81	; 129
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	80 83       	st	Z, r24
		break;
 1a2:	08 95       	ret
		
		case TIMER_STOP:
		default:
			TCCR1B &= ~(_BV(CS12));		
 1a4:	e1 e8       	ldi	r30, 0x81	; 129
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	8b 7f       	andi	r24, 0xFB	; 251
 1ac:	80 83       	st	Z, r24
			TIMSK1 &= ~(_BV(ICIE1) | _BV(OCIE1A));				
 1ae:	ef e6       	ldi	r30, 0x6F	; 111
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	8d 7d       	andi	r24, 0xDD	; 221
 1b6:	80 83       	st	Z, r24
 1b8:	08 95       	ret

000001ba <main>:


// ------------- MAIN ALKAA ----------------------------------------------------------

int main(void)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	cc 54       	subi	r28, 0x4C	; 76
 1c4:	d1 09       	sbc	r29, r1
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	cd bf       	out	0x3d, r28	; 61
	uint8_t ucLimitInd;
	
	// ADC muunnoksen raja-arvot taulukkoon auLimits
	// 4,78/1003 = 4,7657 mV
	
	uint16_t auLimits[ADC_LIMITS] = {
 1d0:	8c e4       	ldi	r24, 0x4C	; 76
 1d2:	e3 e0       	ldi	r30, 0x03	; 3
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	de 01       	movw	r26, r28
 1d8:	11 96       	adiw	r26, 0x01	; 1
 1da:	01 90       	ld	r0, Z+
 1dc:	0d 92       	st	X+, r0
 1de:	8a 95       	dec	r24
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x20>
		963,	// [35]
		983,	// [36]
		1003	// [37]	> 4,78V
	};
	
	DDRD = (_BV(PD4) | _BV(PD5) | _BV(PD6) | _BV(PD7));		// pinnit PD4,PD5,PD6 ja PD7 outputiksi
 1e2:	80 ef       	ldi	r24, 0xF0	; 240
 1e4:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(_BV(PB0));									// PB0 inputiksi
 1e6:	20 98       	cbi	0x04, 0	; 4
	
	sei();													// keskeytykset k‰yttˆˆn
 1e8:	78 94       	sei
	Timer0(TIMER_INIT);										// alustetaan ajastimet
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 69 00 	call	0xd2	; 0xd2 <Timer0>
	Timer1(TIMER_INIT);
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 ac 00 	call	0x158	; 0x158 <Timer1>
	Timer1(TIMER_START);									 		
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 ac 00 	call	0x158	; 0x158 <Timer1>
	
	TakeSteps(-MAX_STEPS-1);
 1fc:	87 ea       	ldi	r24, 0xA7	; 167
 1fe:	9d ef       	ldi	r25, 0xFD	; 253
 200:	0e 94 88 00 	call	0x110	; 0x110 <TakeSteps>
	
	ADMUX |= (_BV(MUX1) | _BV(MUX0));
 204:	ec e7       	ldi	r30, 0x7C	; 124
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	83 60       	ori	r24, 0x03	; 3
 20c:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0);
 20e:	80 81       	ld	r24, Z
 210:	80 64       	ori	r24, 0x40	; 64
 212:	80 83       	st	Z, r24
	ADCSRA |= (_BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0));
 214:	ea e7       	ldi	r30, 0x7A	; 122
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	87 60       	ori	r24, 0x07	; 7
 21c:	80 83       	st	Z, r24
	ADCSRA &= ~(_BV(ADATE));
 21e:	80 81       	ld	r24, Z
 220:	8f 7d       	andi	r24, 0xDF	; 223
 222:	80 83       	st	Z, r24
	ADCSRB &= ~(_BV(ADTS2) | _BV(ADTS1) | _BV(ADTS0));
 224:	eb e7       	ldi	r30, 0x7B	; 123
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	88 7f       	andi	r24, 0xF8	; 248
 22c:	80 83       	st	Z, r24
		}
		if (gu100msPulses < MIN_FREQ) {
			giNextStepPos = 0;
		}
		else {
			giNextStepPos = K*(gu100msPulses-30UL)/1000UL+guOffset;
 22e:	0f 2e       	mov	r0, r31
 230:	f8 ee       	ldi	r31, 0xE8	; 232
 232:	cf 2e       	mov	r12, r31
 234:	f3 e0       	ldi	r31, 0x03	; 3
 236:	df 2e       	mov	r13, r31
 238:	e1 2c       	mov	r14, r1
 23a:	f1 2c       	mov	r15, r1
 23c:	f0 2d       	mov	r31, r0
		}		
		if (giNextStepPos > MAX_STEPS) {
			giNextStepPos = MAX_STEPS;		
 23e:	08 e5       	ldi	r16, 0x58	; 88
 240:	12 e0       	ldi	r17, 0x02	; 2
	ADCSRA |= (_BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0));
	ADCSRA &= ~(_BV(ADATE));
	ADCSRB &= ~(_BV(ADTS2) | _BV(ADTS1) | _BV(ADTS0));
	
	while(1) {
		uChangePos = readADC();											// tehd‰‰n single AD muunnos
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <readADC>
 246:	ac 01       	movw	r20, r24
																		// ja luetaan tulos uChangePos muuttujaan
		
		for (ucLimitInd = 0; ucLimitInd < ADC_LIMITS; ucLimitInd++) {	// etsit‰‰n raja-arvo taulukosta
			if (uChangePos < auLimits[ucLimitInd]) break;
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	9a 81       	ldd	r25, Y+2	; 0x02
 24c:	48 17       	cp	r20, r24
 24e:	59 07       	cpc	r21, r25
 250:	88 f0       	brcs	.+34     	; 0x274 <main+0xba>
 252:	fe 01       	movw	r30, r28
 254:	33 96       	adiw	r30, 0x03	; 3
	
	while(1) {
		uChangePos = readADC();											// tehd‰‰n single AD muunnos
																		// ja luetaan tulos uChangePos muuttujaan
		
		for (ucLimitInd = 0; ucLimitInd < ADC_LIMITS; ucLimitInd++) {	// etsit‰‰n raja-arvo taulukosta
 256:	91 e0       	ldi	r25, 0x01	; 1
			if (uChangePos < auLimits[ucLimitInd]) break;
 258:	21 91       	ld	r18, Z+
 25a:	31 91       	ld	r19, Z+
 25c:	42 17       	cp	r20, r18
 25e:	53 07       	cpc	r21, r19
 260:	20 f0       	brcs	.+8      	; 0x26a <main+0xb0>
	
	while(1) {
		uChangePos = readADC();											// tehd‰‰n single AD muunnos
																		// ja luetaan tulos uChangePos muuttujaan
		
		for (ucLimitInd = 0; ucLimitInd < ADC_LIMITS; ucLimitInd++) {	// etsit‰‰n raja-arvo taulukosta
 262:	9f 5f       	subi	r25, 0xFF	; 255
 264:	96 32       	cpi	r25, 0x26	; 38
 266:	c1 f7       	brne	.-16     	; 0x258 <main+0x9e>
 268:	06 c0       	rjmp	.+12     	; 0x276 <main+0xbc>
			if (uChangePos < auLimits[ucLimitInd]) break;
		}
		if (ucLimitInd < 18 || ucLimitInd > 19) {
 26a:	8e ee       	ldi	r24, 0xEE	; 238
 26c:	89 0f       	add	r24, r25
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	10 f4       	brcc	.+4      	; 0x276 <main+0xbc>
 272:	07 c0       	rjmp	.+14     	; 0x282 <main+0xc8>
	
	while(1) {
		uChangePos = readADC();											// tehd‰‰n single AD muunnos
																		// ja luetaan tulos uChangePos muuttujaan
		
		for (ucLimitInd = 0; ucLimitInd < ADC_LIMITS; ucLimitInd++) {	// etsit‰‰n raja-arvo taulukosta
 274:	90 e0       	ldi	r25, 0x00	; 0
			if (uChangePos < auLimits[ucLimitInd]) break;
		}
		if (ucLimitInd < 18 || ucLimitInd > 19) {
			guOffset = ucLimitInd;
 276:	89 2f       	mov	r24, r25
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 27e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		if (gu100msPulses < MIN_FREQ) {
 282:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <gu100msPulses>
 286:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <gu100msPulses+0x1>
 28a:	4e 97       	sbiw	r24, 0x1e	; 30
 28c:	28 f4       	brcc	.+10     	; 0x298 <main+0xde>
			giNextStepPos = 0;
 28e:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <giNextStepPos+0x1>
 292:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <giNextStepPos>
 296:	1a c0       	rjmp	.+52     	; 0x2cc <main+0x112>
		}
		else {
			giNextStepPos = K*(gu100msPulses-30UL)/1000UL+guOffset;
 298:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <gu100msPulses>
 29c:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <gu100msPulses+0x1>
 2a0:	a0 90 00 01 	lds	r10, 0x0100	; 0x800100 <__data_start>
 2a4:	b0 90 01 01 	lds	r11, 0x0101	; 0x800101 <__data_start+0x1>
 2a8:	aa ee       	ldi	r26, 0xEA	; 234
 2aa:	bc e0       	ldi	r27, 0x0C	; 12
 2ac:	0e 94 30 02 	call	0x460	; 0x460 <__umulhisi3>
 2b0:	6c 56       	subi	r22, 0x6C	; 108
 2b2:	73 48       	sbci	r23, 0x83	; 131
 2b4:	81 40       	sbci	r24, 0x01	; 1
 2b6:	91 09       	sbc	r25, r1
 2b8:	a7 01       	movw	r20, r14
 2ba:	96 01       	movw	r18, r12
 2bc:	0e 94 0e 02 	call	0x41c	; 0x41c <__udivmodsi4>
 2c0:	2a 0d       	add	r18, r10
 2c2:	3b 1d       	adc	r19, r11
 2c4:	30 93 59 01 	sts	0x0159, r19	; 0x800159 <giNextStepPos+0x1>
 2c8:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <giNextStepPos>
		}		
		if (giNextStepPos > MAX_STEPS) {
 2cc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <giNextStepPos>
 2d0:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <giNextStepPos+0x1>
 2d4:	89 35       	cpi	r24, 0x59	; 89
 2d6:	92 40       	sbci	r25, 0x02	; 2
 2d8:	2c f0       	brlt	.+10     	; 0x2e4 <main+0x12a>
			giNextStepPos = MAX_STEPS;		
 2da:	10 93 59 01 	sts	0x0159, r17	; 0x800159 <giNextStepPos+0x1>
 2de:	00 93 58 01 	sts	0x0158, r16	; 0x800158 <giNextStepPos>
 2e2:	0a c0       	rjmp	.+20     	; 0x2f8 <main+0x13e>
		}
		else if (giNextStepPos < 0) {
 2e4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <giNextStepPos>
 2e8:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <giNextStepPos+0x1>
 2ec:	99 23       	and	r25, r25
 2ee:	24 f4       	brge	.+8      	; 0x2f8 <main+0x13e>
			giNextStepPos = 0;
 2f0:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <giNextStepPos+0x1>
 2f4:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <giNextStepPos>
		}
		
		giDeltaStepsPos = giNextStepPos - guCurStepPos;
 2f8:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <giNextStepPos>
 2fc:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <giNextStepPos+0x1>
 300:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
 304:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
 308:	82 1b       	sub	r24, r18
 30a:	93 0b       	sbc	r25, r19
 30c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <giDeltaStepsPos+0x1>
 310:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <giDeltaStepsPos>
		if (abs(giDeltaStepsPos) > MIN_STEP) {
 314:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <giDeltaStepsPos>
 318:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <giDeltaStepsPos+0x1>
 31c:	99 23       	and	r25, r25
 31e:	1c f4       	brge	.+6      	; 0x326 <main+0x16c>
 320:	91 95       	neg	r25
 322:	81 95       	neg	r24
 324:	91 09       	sbc	r25, r1
 326:	06 97       	sbiw	r24, 0x06	; 6
 328:	0c f4       	brge	.+2      	; 0x32c <main+0x172>
 32a:	8b cf       	rjmp	.-234    	; 0x242 <main+0x88>
			TakeSteps(giDeltaStepsPos);
 32c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <giDeltaStepsPos>
 330:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <giDeltaStepsPos+0x1>
 334:	0e 94 88 00 	call	0x110	; 0x110 <TakeSteps>
			guCurStepPos = guCurStepPos + giDeltaStepsPos;
 338:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
 33c:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
 340:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <giDeltaStepsPos>
 344:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <giDeltaStepsPos+0x1>
 348:	82 0f       	add	r24, r18
 34a:	93 1f       	adc	r25, r19
 34c:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__data_end+0x1>
 350:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
 354:	76 cf       	rjmp	.-276    	; 0x242 <main+0x88>

00000356 <__vector_11>:
// --------------------------------------------------
// compare ISR is called on compare match
// Timer0 runs in CTC mode, counts from 0 to OCR1A
ISR(TIMER1_COMPA_vect)
// --------------------------------------------------
{
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	8f 93       	push	r24
 362:	9f 93       	push	r25
	// 100 ms has passed, save # of pulses counted and reset pulse counter
	// gu100msPulses contains all the time the last valid # of pulses/100ms
	gu100msPulses  = gu100msPulseCounter;
 364:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <gu100msPulseCounter>
 368:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <gu100msPulseCounter+0x1>
 36c:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <gu100msPulses+0x1>
 370:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <gu100msPulses>
	gu100msPulseCounter = 0;
 374:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <gu100msPulseCounter+0x1>
 378:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <gu100msPulseCounter>
}
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <__vector_14>:

// This IRQ handler is called every time TCNT0 == OCR0A
// --------------------------------------
ISR(TIMER0_COMPA_vect)
// --------------------------------------
{
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31
	PORTD = aStepSequence[gucStepSeqInd];	// write phase out to motor
 39c:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <gucStepSeqInd>
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	e1 5b       	subi	r30, 0xB1	; 177
 3a4:	fe 4f       	sbci	r31, 0xFE	; 254
 3a6:	80 81       	ld	r24, Z
 3a8:	8b b9       	out	0x0b, r24	; 11
	gucStepSeqInd += direction;				// next step in sequence in correct direction
 3aa:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <direction>
 3ae:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <gucStepSeqInd>
 3b2:	89 0f       	add	r24, r25
 3b4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <gucStepSeqInd>
	gucStepSeqInd &= MAX_STEP_SEQ;			// keep sequence index in range of 0-3
 3b8:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <gucStepSeqInd>
 3bc:	83 70       	andi	r24, 0x03	; 3
 3be:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <gucStepSeqInd>
	guStepCounter++;						// count steps taken
 3c2:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <guStepCounter>
 3c6:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <guStepCounter+0x1>
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <guStepCounter+0x1>
 3d0:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <guStepCounter>
}
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	9f 91       	pop	r25
 3da:	8f 91       	pop	r24
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <__vector_10>:
// capture ISR calculates # of captured pulses inside 100ms window
// ISR is called on the falling edge of the input capture pulse
// works ok for low frequency signals (0..1,5kHz), on higher frequencies the pulse width shall be measured
ISR(TIMER1_CAPT_vect)
// --------------------------------------------------
{
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
	ICR1 = 0x00;				// reset input capture register
 3f4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 3f8:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	gu100msPulseCounter++;
 3fc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <gu100msPulseCounter>
 400:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <gu100msPulseCounter+0x1>
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <gu100msPulseCounter+0x1>
 40a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <gu100msPulseCounter>
}
 40e:	9f 91       	pop	r25
 410:	8f 91       	pop	r24
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <__udivmodsi4>:
 41c:	a1 e2       	ldi	r26, 0x21	; 33
 41e:	1a 2e       	mov	r1, r26
 420:	aa 1b       	sub	r26, r26
 422:	bb 1b       	sub	r27, r27
 424:	fd 01       	movw	r30, r26
 426:	0d c0       	rjmp	.+26     	; 0x442 <__udivmodsi4_ep>

00000428 <__udivmodsi4_loop>:
 428:	aa 1f       	adc	r26, r26
 42a:	bb 1f       	adc	r27, r27
 42c:	ee 1f       	adc	r30, r30
 42e:	ff 1f       	adc	r31, r31
 430:	a2 17       	cp	r26, r18
 432:	b3 07       	cpc	r27, r19
 434:	e4 07       	cpc	r30, r20
 436:	f5 07       	cpc	r31, r21
 438:	20 f0       	brcs	.+8      	; 0x442 <__udivmodsi4_ep>
 43a:	a2 1b       	sub	r26, r18
 43c:	b3 0b       	sbc	r27, r19
 43e:	e4 0b       	sbc	r30, r20
 440:	f5 0b       	sbc	r31, r21

00000442 <__udivmodsi4_ep>:
 442:	66 1f       	adc	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	88 1f       	adc	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	1a 94       	dec	r1
 44c:	69 f7       	brne	.-38     	; 0x428 <__udivmodsi4_loop>
 44e:	60 95       	com	r22
 450:	70 95       	com	r23
 452:	80 95       	com	r24
 454:	90 95       	com	r25
 456:	9b 01       	movw	r18, r22
 458:	ac 01       	movw	r20, r24
 45a:	bd 01       	movw	r22, r26
 45c:	cf 01       	movw	r24, r30
 45e:	08 95       	ret

00000460 <__umulhisi3>:
 460:	a2 9f       	mul	r26, r18
 462:	b0 01       	movw	r22, r0
 464:	b3 9f       	mul	r27, r19
 466:	c0 01       	movw	r24, r0
 468:	a3 9f       	mul	r26, r19
 46a:	70 0d       	add	r23, r0
 46c:	81 1d       	adc	r24, r1
 46e:	11 24       	eor	r1, r1
 470:	91 1d       	adc	r25, r1
 472:	b2 9f       	mul	r27, r18
 474:	70 0d       	add	r23, r0
 476:	81 1d       	adc	r24, r1
 478:	11 24       	eor	r1, r1
 47a:	91 1d       	adc	r25, r1
 47c:	08 95       	ret

0000047e <_exit>:
 47e:	f8 94       	cli

00000480 <__stop_program>:
 480:	ff cf       	rjmp	.-2      	; 0x480 <__stop_program>
